#!/usr/bin/env python3
"""
Test script para verificar la implementaci√≥n del sistema de reclutamiento
Verifica que todos los componentes est√©n implementados correctamente
"""

import os
import re

def check_file_exists(filename):
    """Verifica que un archivo existe"""
    if os.path.exists(filename):
        print(f"‚úÖ {filename} existe")
        return True
    else:
        print(f"‚ùå {filename} no encontrado")
        return False

def check_function_in_file(filename, function_name):
    """Verifica que una funci√≥n existe en un archivo"""
    try:
        with open(filename, 'r') as f:
            content = f.read()
        if f"func {function_name}" in content:
            print(f"‚úÖ Funci√≥n {function_name} encontrada en {filename}")
            return True
        else:
            print(f"‚ùå Funci√≥n {function_name} no encontrada en {filename}")
            return False
    except Exception as e:
        print(f"‚ùå Error leyendo {filename}: {e}")
        return False

def check_signal_in_file(filename, signal_name):
    """Verifica que una se√±al est√° definida en un archivo"""
    try:
        with open(filename, 'r') as f:
            content = f.read()
        if f"signal {signal_name}" in content:
            print(f"‚úÖ Se√±al {signal_name} encontrada en {filename}")
            return True
        else:
            print(f"‚ùå Se√±al {signal_name} no encontrada en {filename}")
            return False
    except Exception as e:
        print(f"‚ùå Error leyendo {filename}: {e}")
        return False

def check_group_usage(filename, group_name):
    """Verifica que un grupo es usado en un archivo"""
    try:
        with open(filename, 'r') as f:
            content = f.read()
        if f'"{group_name}"' in content or f"'{group_name}'" in content:
            print(f"‚úÖ Grupo {group_name} referenciado en {filename}")
            return True
        else:
            print(f"‚ùå Grupo {group_name} no referenciado en {filename}")
            return False
    except Exception as e:
        print(f"‚ùå Error leyendo {filename}: {e}")
        return False

def main():
    print("üß™ Verificando implementaci√≥n del sistema de reclutamiento\\n")
    
    all_checks_passed = True
    
    # Verificar archivos principales
    print("üìÅ Verificando archivos principales...")
    files_to_check = [
        "Scripts/Strategic/TownInstance.gd",
        "Scripts/Strategic/StrategicMap.gd", 
        "Scripts/UI/MainHUD.gd",
        "Scripts/Data/UnitData.gd",
        "RECRUITMENT_SYSTEM.md"
    ]
    
    for file in files_to_check:
        if not check_file_exists(file):
            all_checks_passed = False
    
    print()
    
    # Verificar funciones de TownInstance
    print("üèòÔ∏è Verificando TownInstance.gd...")
    town_functions = [
        "detectar_divisiones_para_reclutamiento",
        "obtener_unidades_reclutables",
        "crear_visual_pueblo"
    ]
    
    for func in town_functions:
        if not check_function_in_file("Scripts/Strategic/TownInstance.gd", func):
            all_checks_passed = False
    
    # Verificar se√±ales de TownInstance
    town_signals = [
        "division_en_pueblo",
        "division_sale_pueblo"
    ]
    
    for signal in town_signals:
        if not check_signal_in_file("Scripts/Strategic/TownInstance.gd", signal):
            all_checks_passed = False
    
    print()
    
    # Verificar funciones de StrategicMap
    print("üó∫Ô∏è Verificando StrategicMap.gd...")
    map_functions = [
        "crear_pueblos_prueba",
        "conectar_se√±ales_pueblos",
        "_on_division_en_pueblo",
        "_on_division_sale_pueblo"
    ]
    
    for func in map_functions:
        if not check_function_in_file("Scripts/Strategic/StrategicMap.gd", func):
            all_checks_passed = False
    
    print()
    
    # Verificar funciones de MainHUD
    print("üñ•Ô∏è Verificando MainHUD.gd...")
    hud_functions = [
        "habilitar_reclutamiento",
        "deshabilitar_reclutamiento",
        "mostrar_boton_reclutamiento",
        "mostrar_menu_reclutamiento",
        "crear_dialogo_reclutamiento",
        "_reclutar_unidad"
    ]
    
    for func in hud_functions:
        if not check_function_in_file("Scripts/UI/MainHUD.gd", func):
            all_checks_passed = False
    
    print()
    
    # Verificar grupos
    print("üë• Verificando uso de grupos...")
    if not check_group_usage("Scripts/Strategic/TownInstance.gd", "towns"):
        all_checks_passed = False
    if not check_group_usage("Scripts/Strategic/StrategicMap.gd", "unidades"):
        all_checks_passed = False
    
    print()
    
    # Verificar campos de UnitData
    print("üìä Verificando UnitData.gd...")
    try:
        with open("Scripts/Data/UnitData.gd", 'r') as f:
            content = f.read()
        if "moral:" in content and "experiencia:" in content:
            print("‚úÖ Campos moral y experiencia encontrados en UnitData.gd")
        else:
            print("‚ùå Campos moral y experiencia no encontrados en UnitData.gd")
            all_checks_passed = False
    except Exception as e:
        print(f"‚ùå Error verificando UnitData.gd: {e}")
        all_checks_passed = False
    
    print()
    
    # Resultado final
    if all_checks_passed:
        print("üéâ ¬°Todas las verificaciones pasaron! El sistema de reclutamiento est√° correctamente implementado.")
        print()
        print("üìã Para probar el sistema:")
        print("1. Abre el proyecto en Godot")
        print("2. Ejecuta la escena principal (MainHUD.tscn)")
        print("3. Click izquierdo para seleccionar una divisi√≥n")
        print("4. Click derecho para mover la divisi√≥n cerca de un pueblo")
        print("5. El bot√≥n 'Reclutar en [Pueblo]' aparecer√° en el panel de detalles")
        print("6. Click en el bot√≥n para abrir el men√∫ de reclutamiento")
    else:
        print("‚ùå Algunas verificaciones fallaron. Revisa los errores anteriores.")
    
    return all_checks_passed

if __name__ == "__main__":
    main()